/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package ru.coding4fun.tsql.contains;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static ru.coding4fun.tsql.contains.psi.ContainsTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Contains.flex</tt>
 */
public class _ContainsLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char[] ZZ_CMAP_Z = zzUnpackCMap(
          "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\2\11\1\12\1\13\6\14\1\15\23\14\1\16" +
                  "\1\14\1\17\1\20\12\14\1\21\10\11\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1" +
                  "\32\1\33\1\34\1\35\2\11\1\14\1\36\3\11\1\37\10\11\1\40\1\41\5\14\1\42\1\43" +
                  "\11\11\1\44\2\11\1\45\5\11\1\46\4\11\1\47\1\50\4\11\51\14\1\51\3\14\1\52\1" +
                  "\53\4\14\1\54\12\11\1\55\u0381\11");
  /* The ZZ_CMAP_Y table has 2944 entries */
  static final char[] ZZ_CMAP_Y = zzUnpackCMap(
          "\1\0\1\1\1\2\1\3\1\4\1\5\1\4\1\6\1\7\1\1\1\10\1\11\1\12\1\13\1\12\1\13\34" +
                  "\12\1\14\1\15\1\16\10\1\1\17\1\20\1\12\1\21\4\12\1\22\10\12\1\23\12\12\1\24" +
                  "\1\12\1\25\1\24\1\12\1\26\4\1\1\12\1\27\1\30\2\1\2\12\1\27\1\1\1\31\1\24\5" +
                  "\12\1\32\1\33\1\34\1\1\1\35\1\12\1\1\1\36\5\12\1\37\1\40\1\41\1\12\1\27\1" +
                  "\42\1\12\1\43\1\44\1\1\1\12\1\45\4\1\1\12\1\46\4\1\1\47\2\12\1\50\1\1\1\51" +
                  "\1\15\1\24\1\52\1\53\1\54\1\55\1\56\1\57\2\15\1\60\1\53\1\54\1\61\1\1\1\62" +
                  "\1\1\1\63\1\64\1\21\1\54\1\65\1\1\1\66\1\15\1\67\1\70\1\53\1\54\1\65\1\1\1" +
                  "\57\1\15\1\40\1\71\1\72\1\73\1\74\1\1\1\66\2\1\1\75\1\35\1\54\1\50\1\1\1\76" +
                  "\1\15\1\1\1\77\1\35\1\54\1\100\1\1\1\56\1\15\1\101\1\75\1\35\1\12\1\102\1" +
                  "\56\1\103\1\15\1\41\1\104\1\105\1\12\1\106\1\107\3\1\1\24\2\12\1\110\1\107" +
                  "\3\1\1\111\1\112\1\113\1\114\1\115\1\116\2\1\1\66\3\1\1\117\1\12\1\120\1\1" +
                  "\1\121\7\1\2\12\1\27\1\122\1\1\1\123\1\124\1\125\1\126\1\1\2\12\1\127\2\12" +
                  "\1\130\24\12\1\131\1\132\2\12\1\131\2\12\1\133\1\134\1\13\3\12\1\134\3\12" +
                  "\1\27\2\1\1\12\1\1\5\12\1\135\1\24\45\12\1\136\1\12\1\137\1\27\4\12\1\27\1" +
                  "\140\1\141\1\15\1\12\1\15\1\12\1\15\1\141\1\66\3\12\1\142\1\1\1\143\4\1\5" +
                  "\12\1\26\1\144\1\12\1\145\4\12\1\37\1\12\1\146\3\1\1\12\1\147\1\150\2\12\1" +
                  "\151\1\12\1\74\3\1\1\12\1\107\3\12\1\150\4\1\1\152\5\1\1\104\2\12\1\142\1" +
                  "\153\3\1\1\154\1\12\1\155\1\41\2\12\1\37\1\1\2\12\1\142\1\1\1\36\1\41\1\12" +
                  "\1\147\1\45\5\1\1\156\1\157\14\12\4\1\21\12\1\135\2\12\1\135\1\160\1\12\1" +
                  "\147\3\12\1\161\1\162\1\163\1\120\1\162\1\164\1\1\1\165\2\1\1\166\1\1\1\167" +
                  "\1\1\1\120\6\1\1\170\1\171\1\172\1\173\1\174\3\1\1\175\147\1\2\12\1\146\2" +
                  "\12\1\146\10\12\1\176\1\177\2\12\1\127\3\12\1\200\1\1\1\12\1\107\4\201\4\1" +
                  "\1\122\35\1\1\202\2\1\1\203\1\24\4\12\1\204\1\24\4\12\1\130\1\104\1\12\1\147" +
                  "\1\24\4\12\1\146\1\1\1\12\1\27\3\1\1\12\40\1\133\12\1\37\4\1\135\12\1\37\2" +
                  "\1\10\12\1\120\4\1\2\12\1\147\20\12\1\120\1\12\1\205\1\1\2\12\1\146\1\122" +
                  "\1\12\1\147\4\12\1\37\2\1\1\206\1\207\5\12\1\210\1\12\1\146\1\26\3\1\1\206" +
                  "\1\211\1\12\1\30\1\1\3\12\1\142\1\207\2\12\1\142\3\1\1\212\1\41\1\12\1\37" +
                  "\1\12\1\107\1\1\1\12\1\120\1\47\2\12\1\30\1\122\1\1\1\213\1\214\2\12\1\45" +
                  "\1\1\1\215\1\1\1\12\1\216\3\12\1\217\1\220\1\221\1\27\1\63\1\222\1\223\1\201" +
                  "\2\12\1\130\1\37\7\12\1\30\1\1\72\12\1\142\1\12\1\224\2\12\1\151\20\1\26\12" +
                  "\1\147\6\12\1\74\2\1\1\107\1\225\1\54\1\226\1\227\6\12\1\15\1\1\1\154\25\12" +
                  "\1\147\1\1\4\12\1\207\2\12\1\26\2\1\1\151\7\1\1\213\7\12\1\120\2\1\1\24\1" +
                  "\27\1\24\1\27\1\230\4\12\1\146\1\231\1\232\2\1\1\233\1\12\1\13\1\234\2\147" +
                  "\2\1\7\12\1\27\30\1\1\12\1\120\3\12\1\66\2\1\2\12\1\1\1\12\1\235\2\12\1\37" +
                  "\1\12\1\147\2\12\1\236\3\1\11\12\1\147\1\1\2\12\1\236\1\12\1\151\2\12\1\26" +
                  "\3\12\1\142\11\1\23\12\1\107\1\12\1\37\1\26\11\1\1\237\2\12\1\240\1\12\1\37" +
                  "\1\12\1\107\1\12\1\146\4\1\1\12\1\241\1\12\1\37\1\12\1\74\4\1\3\12\1\242\4" +
                  "\1\1\66\1\243\1\12\1\142\2\1\1\12\1\120\1\12\1\120\2\1\1\117\1\12\1\150\1" +
                  "\1\3\12\1\37\1\12\1\37\1\12\1\30\1\12\1\15\6\1\4\12\1\45\3\1\3\12\1\30\3\12" +
                  "\1\30\60\1\1\154\2\12\1\26\4\1\1\154\2\12\2\1\1\12\1\45\1\1\1\154\1\12\1\107" +
                  "\2\1\2\12\1\244\1\154\2\12\1\30\1\245\1\246\2\1\1\12\1\21\1\151\5\1\1\247" +
                  "\1\250\1\45\2\12\1\146\2\1\1\70\1\53\1\54\1\65\1\1\1\251\1\15\11\1\3\12\1" +
                  "\150\1\252\3\1\3\12\1\1\1\253\13\1\2\12\1\146\2\1\1\254\2\1\3\12\1\1\1\255" +
                  "\3\1\2\12\1\27\5\1\1\12\1\74\30\1\4\12\1\1\1\122\34\1\3\12\1\45\20\1\1\54" +
                  "\1\12\1\146\1\1\1\66\2\1\1\207\1\12\67\1\71\12\1\74\16\1\14\12\1\142\53\1" +
                  "\2\12\1\146\75\1\44\12\1\107\33\1\43\12\1\45\1\12\1\146\7\1\1\12\1\147\1\1" +
                  "\3\12\1\1\1\142\1\1\1\154\1\256\1\12\67\1\4\12\1\150\1\66\3\1\1\154\4\1\1" +
                  "\66\1\1\76\12\1\120\1\1\57\12\1\30\20\1\1\15\77\1\6\12\1\27\1\120\1\45\1\74" +
                  "\66\1\5\12\1\213\3\12\1\141\1\257\1\260\1\261\3\12\1\262\1\263\1\12\1\264" +
                  "\1\265\1\35\24\12\1\266\1\12\1\35\1\130\1\12\1\130\1\12\1\213\1\12\1\213\1" +
                  "\146\1\12\1\146\1\12\1\54\1\12\1\54\1\12\1\215\3\1\14\12\1\150\3\1\4\12\1" +
                  "\142\113\1\1\261\1\12\1\267\1\270\1\271\1\272\1\273\1\274\1\275\1\151\1\276" +
                  "\1\151\24\1\55\12\1\107\2\1\103\12\1\150\15\12\1\147\150\12\1\15\25\1\41\12" +
                  "\1\147\36\1");
  /* The ZZ_CMAP_A table has 3056 entries */
  static final char[] ZZ_CMAP_A = zzUnpackCMap(
          "\11\0\5\1\22\0\1\1\1\37\1\26\3\0\1\36\1\0\1\32\1\33\1\34\1\0\1\31\1\0\1\30" +
                  "\1\0\12\27\7\0\1\4\1\24\1\16\1\6\1\10\1\11\1\22\1\17\1\14\2\25\1\15\1\12\1" +
                  "\5\1\2\2\25\1\3\1\13\1\7\1\20\1\25\1\21\1\23\2\25\5\0\2\25\1\3\1\13\1\7\1" +
                  "\20\1\25\1\21\1\23\2\25\1\0\1\35\1\0\1\40\6\0\1\1\12\0\1\1\11\0\1\25\12\0" +
                  "\1\25\4\0\1\25\5\0\27\25\1\0\12\25\4\0\14\25\16\0\5\25\7\0\1\25\1\0\1\25\1" +
                  "\0\5\25\1\0\2\25\2\0\4\25\1\0\1\25\6\0\1\25\1\0\3\25\1\0\1\25\1\0\4\25\1\0" +
                  "\23\25\1\0\13\25\10\0\6\25\1\0\26\25\2\0\1\25\6\0\10\25\10\0\13\25\5\0\3\25" +
                  "\33\0\6\25\1\0\1\25\17\0\2\25\7\0\2\25\12\0\3\25\2\0\2\25\1\0\16\25\15\0\11" +
                  "\25\13\0\1\25\30\0\6\25\4\0\2\25\4\0\1\25\5\0\6\25\4\0\1\25\11\0\1\25\3\0" +
                  "\1\25\7\0\11\25\7\0\5\25\1\0\10\25\6\0\26\25\3\0\1\25\2\0\1\25\7\0\11\25\4" +
                  "\0\10\25\2\0\2\25\2\0\26\25\1\0\7\25\1\0\1\25\3\0\4\25\3\0\1\25\20\0\1\25" +
                  "\15\0\2\25\1\0\1\25\5\0\6\25\4\0\2\25\1\0\2\25\1\0\2\25\1\0\2\25\17\0\4\25" +
                  "\1\0\1\25\3\0\3\25\20\0\11\25\1\0\2\25\1\0\2\25\1\0\5\25\3\0\1\25\2\0\1\25" +
                  "\30\0\1\25\13\0\10\25\2\0\1\25\3\0\1\25\1\0\6\25\3\0\3\25\1\0\4\25\3\0\2\25" +
                  "\1\0\1\25\1\0\2\25\3\0\2\25\3\0\3\25\3\0\14\25\13\0\10\25\1\0\2\25\10\0\3" +
                  "\25\5\0\1\25\4\0\10\25\1\0\6\25\1\0\5\25\3\0\1\25\3\0\2\25\15\0\13\25\2\0" +
                  "\1\25\6\0\3\25\10\0\1\25\5\0\22\25\3\0\10\25\1\0\11\25\1\0\1\25\2\0\7\25\11" +
                  "\0\1\25\1\0\2\25\15\0\2\25\1\0\1\25\2\0\2\25\1\0\1\25\2\0\1\25\6\0\4\25\1" +
                  "\0\7\25\1\0\3\25\1\0\1\25\1\0\1\25\2\0\2\25\1\0\4\25\1\0\2\25\11\0\1\25\2" +
                  "\0\5\25\1\0\1\25\25\0\14\25\1\0\24\25\13\0\5\25\22\0\7\25\4\0\4\25\3\0\1\25" +
                  "\3\0\2\25\7\0\3\25\4\0\15\25\14\0\1\25\1\0\6\25\1\0\1\25\5\0\1\25\2\0\13\25" +
                  "\1\0\15\25\1\0\4\25\2\0\7\25\1\0\1\25\1\0\4\25\2\0\1\25\1\0\4\25\2\0\7\25" +
                  "\1\0\1\25\1\0\4\25\2\0\16\25\2\0\6\25\2\0\15\25\2\0\1\25\1\1\17\25\1\0\10" +
                  "\25\7\0\15\25\1\0\6\25\23\0\1\25\4\0\1\25\3\0\5\25\2\0\22\25\1\0\1\25\5\0" +
                  "\17\25\1\0\16\25\2\0\5\25\13\0\14\25\13\0\1\25\15\0\7\25\7\0\16\25\15\0\2" +
                  "\25\11\0\4\25\1\0\4\25\3\0\2\25\11\0\10\25\1\0\1\25\1\0\1\25\1\0\1\25\1\0" +
                  "\6\25\1\0\7\25\1\0\1\25\3\0\3\25\1\0\7\25\3\0\4\25\2\0\6\25\4\0\13\1\15\0" +
                  "\2\1\5\0\1\1\17\0\1\1\1\0\1\25\15\0\1\25\2\0\1\25\4\0\1\25\2\0\12\25\1\0\1" +
                  "\25\3\0\5\25\6\0\1\25\1\0\1\25\1\0\1\25\1\0\4\25\1\0\13\25\2\0\4\25\5\0\5" +
                  "\25\4\0\1\25\4\0\2\25\13\0\5\25\6\0\4\25\3\0\2\25\14\0\10\25\7\0\10\25\1\0" +
                  "\7\25\1\0\1\1\4\0\2\25\12\0\5\25\5\0\2\25\3\0\7\25\6\0\3\25\12\0\2\25\13\0" +
                  "\11\25\2\0\27\25\2\0\7\25\1\0\3\25\1\0\4\25\1\0\4\25\2\0\6\25\3\0\1\25\1\0" +
                  "\1\25\2\0\5\25\1\0\12\25\12\0\5\25\1\0\3\25\1\0\10\25\4\0\7\25\3\0\1\25\3" +
                  "\0\2\25\1\0\1\25\3\0\2\25\2\0\5\25\2\0\1\25\1\0\1\25\30\0\3\25\3\0\6\25\2" +
                  "\0\6\25\2\0\6\25\11\0\7\25\4\0\5\25\3\0\5\25\5\0\1\25\1\0\10\25\1\0\5\25\1" +
                  "\0\1\25\1\0\2\25\1\0\2\25\1\0\12\25\6\0\12\25\2\0\6\25\2\0\6\25\2\0\6\25\2" +
                  "\0\3\25\3\0\14\25\1\0\16\25\1\0\2\25\1\0\2\25\1\0\10\25\6\0\4\25\4\0\16\25" +
                  "\2\0\1\25\1\0\14\25\1\0\2\25\3\0\1\25\2\0\4\25\1\0\2\25\12\0\10\25\6\0\6\25" +
                  "\1\0\3\25\1\0\12\25\3\0\1\25\12\0\4\25\25\0\1\25\1\0\1\25\3\0\7\25\1\0\1\25" +
                  "\1\0\4\25\1\0\17\25\1\0\2\25\14\0\3\25\7\0\4\25\11\0\2\25\1\0\1\25\20\0\4" +
                  "\25\10\0\1\25\13\0\10\25\5\0\3\25\2\0\1\25\2\0\2\25\2\0\4\25\1\0\14\25\1\0" +
                  "\1\25\1\0\7\25\1\0\21\25\1\0\4\25\2\0\10\25\1\0\7\25\1\0\14\25\1\0\4\25\1" +
                  "\0\5\25\1\0\1\25\3\0\14\25\2\0\10\25\1\0\2\25\1\0\1\25\2\0\1\25\1\0\12\25" +
                  "\1\0\4\25\1\0\1\25\1\0\1\25\6\0\1\25\4\0\1\25\1\0\1\25\1\0\1\25\1\0\3\25\1" +
                  "\0\2\25\1\0\1\25\2\0\1\25\1\0\1\25\1\0\1\25\1\0\1\25\1\0\1\25\1\0\2\25\1\0" +
                  "\1\25\2\0\4\25\1\0\7\25\1\0\4\25\1\0\4\25\1\0\1\25\1\0\12\25\1\0\5\25\1\0" +
                  "\3\25\1\0\5\25\1\0\5\25");
  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   * at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int[] ZZ_LEXSTATE = {
          0, 0
  };
  private static final String ZZ_ACTION_PACKED_0 =
          "\1\0\1\1\1\2\11\3\1\4\1\5\1\1\1\6" +
                  "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\13\3" +
                  "\1\0\1\5\1\0\1\16\1\17\1\20\1\21\5\3" +
                  "\1\22\3\3\1\23\1\0\1\24\1\25\6\3\1\0" +
                  "\2\3\1\26\3\3\1\0\4\3\1\27\1\30\1\3" +
                  "\1\31\1\3\1\32\2\3\1\33\3\3\1\34";
  /**
   * Translates DFA states to action switch labels.
   */
  private static final int[] ZZ_ACTION = zzUnpackAction();
  private static final String ZZ_ROWMAP_PACKED_0 =
          "\0\0\0\41\0\102\0\143\0\204\0\245\0\306\0\347" +
                  "\0\u0108\0\u0129\0\u014a\0\u016b\0\u018c\0\u01ad\0\u01ce\0\41" +
                  "\0\41\0\41\0\41\0\41\0\u01ef\0\41\0\204\0\u0210" +
                  "\0\u0231\0\u0252\0\u0273\0\u0294\0\u02b5\0\u02d6\0\u02f7\0\u0318" +
                  "\0\u0339\0\u035a\0\u037b\0\u039c\0\u01ce\0\41\0\41\0\u03bd" +
                  "\0\204\0\u03de\0\u03ff\0\u0420\0\u0441\0\u0462\0\204\0\u0483" +
                  "\0\u04a4\0\u04c5\0\41\0\u04e6\0\204\0\204\0\u0507\0\u0528" +
                  "\0\u0549\0\u056a\0\u058b\0\u05ac\0\u05cd\0\u05ee\0\u060f\0\204" +
                  "\0\u0630\0\u0651\0\u0672\0\u0693\0\u06b4\0\u06d5\0\u06f6\0\u0717" +
                  "\0\204\0\41\0\u0738\0\204\0\u0759\0\204\0\u077a\0\u079b" +
                  "\0\204\0\u07bc\0\u07dd\0\u07fe\0\204";
  private static final String ZZ_TRANS_PACKED_0 =
          "\1\2\1\3\1\4\1\5\1\6\1\7\1\5\1\10" +
                  "\1\5\1\11\1\12\1\5\1\13\4\5\1\14\4\5" +
                  "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24" +
                  "\1\25\1\2\1\26\42\0\1\3\41\0\1\5\1\27" +
                  "\22\5\15\0\24\5\15\0\3\5\1\30\20\5\15\0" +
                  "\1\31\5\5\1\32\15\5\15\0\1\5\1\33\13\5" +
                  "\1\34\6\5\15\0\1\35\1\5\1\36\21\5\15\0" +
                  "\2\5\1\37\21\5\15\0\3\5\1\40\5\5\1\41" +
                  "\12\5\15\0\6\5\1\42\15\5\13\0\26\43\1\0" +
                  "\12\43\27\0\1\44\1\45\37\0\1\46\50\0\1\47" +
                  "\3\0\4\5\1\50\17\5\15\0\5\5\1\51\16\5" +
                  "\15\0\2\5\1\52\21\5\15\0\16\5\1\53\5\5" +
                  "\15\0\6\5\1\54\15\5\15\0\1\5\1\55\22\5" +
                  "\15\0\13\5\1\56\10\5\15\0\21\5\1\57\2\5" +
                  "\15\0\7\5\1\60\14\5\15\0\2\5\1\61\21\5" +
                  "\15\0\12\5\1\62\11\5\13\0\26\43\1\63\12\43" +
                  "\27\0\1\44\12\0\1\64\24\5\15\0\1\5\1\65" +
                  "\22\5\15\0\6\5\1\66\15\5\15\0\11\5\1\67" +
                  "\12\5\15\0\10\5\1\70\13\5\15\0\11\5\1\71" +
                  "\12\5\15\0\13\5\1\72\10\5\15\0\22\5\1\73" +
                  "\1\5\15\0\20\5\1\74\3\5\14\0\1\64\3\0" +
                  "\1\75\35\0\2\5\1\76\21\5\15\0\11\5\1\77" +
                  "\12\5\15\0\6\5\1\100\15\5\15\0\6\5\1\101" +
                  "\15\5\15\0\1\102\23\5\15\0\15\5\1\103\6\5" +
                  "\15\0\1\104\40\0\16\5\1\105\5\5\15\0\1\106" +
                  "\23\5\15\0\14\5\1\107\7\5\15\0\16\5\1\110" +
                  "\5\5\15\0\5\5\1\111\16\5\22\0\1\112\33\0" +
                  "\1\5\1\113\22\5\15\0\7\5\1\114\14\5\15\0" +
                  "\5\5\1\115\16\5\15\0\5\5\1\116\16\5\15\0" +
                  "\16\5\1\117\5\5\15\0\12\5\1\120\11\5\15\0" +
                  "\11\5\1\121\12\5\15\0\1\122\23\5\15\0\3\5" +
                  "\1\123\20\5\15\0\2\5\1\124\21\5\15\0\13\5" +
                  "\1\125\10\5\13\0";

  private static int zzUnpackAction(String packed, int offset, int[] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int[] ZZ_ROWMAP = zzUnpackRowMap();
  private static final String ZZ_ATTRIBUTE_PACKED_0 =
          "\1\0\1\11\15\1\5\11\1\1\1\11\14\1\1\0" +
                  "\1\1\1\0\2\11\13\1\1\11\1\0\10\1\1\0" +
                  "\6\1\1\0\5\1\1\11\13\1";
  /**
   * the input device
   */
  private final java.io.Reader zzReader;

  private static int zzUnpackRowMap(String packed, int offset, int[] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int[] ZZ_TRANS = zzUnpackTrans();

  /* user code: */
  public _ContainsLexer() {
    this(null);
  }

  /**
   * Translates characters to character classes
   * Chosen bits are [11, 6, 4]
   * Total runtime size is 14176 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch >> 10] << 6) | ((ch >> 4) & 0x3f)] << 4) | (ch & 0xf)];
  }

  private static int zzUnpackTrans(String packed, int offset, int[] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
          "Unknown internal scanner error",
          "Error: could not match input",
          "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static int[] zzUnpackAction() {
    int[] result = new int[85];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int[] zzUnpackRowMap() {
    int[] result = new int[85];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int[] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  private static int[] zzUnpackTrans() {
    int[] result = new int[2079];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  /**
   * the current state of the DFA
   */
  private int zzState;

  /**
   * the current lexical state
   */
  private int zzLexicalState = YYINITIAL;

  /**
   * this buffer contains the current text to be matched and is
   * the source of the yytext() string
   */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
   from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /**
   * zzAtEOF == true <=> the scanner is at the EOF
   */
  private boolean zzAtEOF;

  /**
   * denotes if the user-EOF-code has already been executed
   */
  private boolean zzEOFDone;

  private static int[] zzUnpackAttribute() {
    int[] result = new int[85];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }


  /**
   * Creates a new scanner
   *
   * @param in the java.io.Reader to read input from.
   */
  public _ContainsLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }

  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 29: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 30: break;
          case 3: 
            { return WORD;
            } 
            // fall through
          case 31: break;
          case 4: 
            { return QUOTE;
            }
          // fall through
          case 32: break;
          case 5: 
            { return INTEGER;
            }
          // fall through
          case 33: break;
          case 6: 
            { return COMMA;
            }
          // fall through
          case 34: break;
          case 7: 
            { return LPAREN;
            }
          // fall through
          case 35: break;
          case 8: 
            { return RPAREN;
            }
          // fall through
          case 36: break;
          case 9: 
            { return ASTERISK;
            }
          // fall through
          case 37: break;
          case 10: 
            { return OR_OP;
            }
          // fall through
          case 38: break;
          case 11: 
            { return AND_OP;
            }
          // fall through
          case 39: break;
          case 12: 
            { return TILDA;
            }
          // fall through
          case 40: break;
          case 13: 
            { return OR;
            }
          // fall through
          case 41: break;
          case 14: 
            { return DECIMAL;
            }
          // fall through
          case 42: break;
          case 15: 
            { return AMP_NOT_OP;
            }
          // fall through
          case 43: break;
          case 16: 
            { return AND;
            }
          // fall through
          case 44:
            break;
          case 17: {
            return NOT;
          }
          // fall through
          case 45:
            break;
          case 18: {
            return MAX;
          }
          // fall through
          case 46:
            break;
          case 19: {
            return STRING;
          }
          // fall through
          case 47:
            break;
          case 20: {
            return NEAR;
          }
          // fall through
          case 48:
            break;
          case 21: {
            return TRUE;
          }
          // fall through
          case 49:
            break;
          case 22: 
            { return FALSE;
            }
          // fall through
          case 50: break;
          case 23: 
            { return WEIGHT;
            }
          // fall through
          case 51: break;
          case 24: 
            { return AND_NOT;
            }
          // fall through
          case 52: break;
          case 25: 
            { return FORMS_OF;
            }
          // fall through
          case 53: break;
          case 26: 
            { return IS_ABOUT;
            }
          // fall through
          case 54: break;
          case 27: 
            { return THESAURUS;
            } 
            // fall through
          case 55: break;
          case 28: 
            { return INFLECTIONAL;
            } 
            // fall through
          case 56: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
