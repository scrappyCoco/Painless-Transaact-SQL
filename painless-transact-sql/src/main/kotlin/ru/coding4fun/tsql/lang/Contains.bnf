/*
 * Copyright [2020] Coding4fun
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

{
  parserClass="ru.coding4fun.tsql.lang.ContainsParser"
  parserUtilClass="ru.coding4fun.tsql.lang.ContainsParserUtil"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Contains"
  psiImplClassSuffix="Impl"
  psiPackage="ru.coding4fun.tsql.lang.psi"
  psiImplPackage="ru.coding4fun.tsql.lang.psi.impl"

  elementTypeHolderClass="ru.coding4fun.tsql.lang.psi.ContainsTypes"
  elementTypeClass="ru.coding4fun.tsql.lang.ContainsElementType"
  tokenTypeClass="ru.coding4fun.tsql.lang.ContainsTokenType"

  psiImplUtilClass="ru.coding4fun.tsql.lang.psi.impl.ContainsPsiImplUtil"

  tokens=[
      COMMA=','
      LPAREN="("
      RPAREN=")"
      ASTERISK='*'
      OR='|'
      TILDA='~'
      AND='&'
      AMP_NOT='&!'
      QUOTE='"'
      OR2='regexp:[Oo][Rr]'
      AND2='regexp:[Aa][Nn][Dd]'
      NOT='regexp:[Nn][Oo][Tt]'
      NEAR='regexp:[Nn][Ee][Aa][Rr]'
      FORMSOF='regexp:[Ff][Oo][Rr][Mm][Ss][Oo][Ff]'
      INFLECTIONAL='regexp:[Ii][Nn][Ff][Ll][Ee][Cc][Tt][Ii][Oo][Nn][Aa][Ll]'
      THESAURUS='regexp:[Tt][Hh][Ee][Ss][Aa][Uu][Rr][Uu][Ss]'
      TRUE='regexp:[Tt][Rr][Uu][Ee]'
      FALSE='regexp:[Ff][Aa][Ll][Ss][Ee]'
      WEIGHT='regexp:[Ww][Ee][Ii][Gg][Hh][Tt]'
      MAX='regexp:[Mm][Aa][Xx]'
      ISABOUT='regexp:[Ii][Ss][Aa][Bb][Oo][Uu][Tt]'
      C_WORD='regexp:[\p{L}0-9]+'

      string='regexp:"([^"]+)"'
      decimal='regexp:\d?[.]\d'
      integer='regexp:\d+'
      space='regexp:\s+'
  ]
}

contains_search_condition ::=
  { generic_proximity_term | weighted_term | simple_term | generation_term | custom_proximity_term }
  { { and_op | and_not_op | or_op } contains_search_condition }*

simple_term ::= { C_WORD | string }
generation_term ::= FORMSOF LPAREN { INFLECTIONAL | THESAURUS } COMMA simple_term+ RPAREN
generic_proximity_term ::= simple_term { { NEAR | TILDA } { simple_term }+ }

custom_proximity_term ::=
  NEAR LPAREN {
    simple_term { COMMA simple_term }* | { LPAREN simple_term { COMMA simple_term }* RPAREN }
     [COMMA maximum_distance [COMMA match_order ] ]
  } RPAREN

maximum_distance ::= { integer | MAX }
match_order ::= { TRUE | FALSE }
weighted_term ::= ISABOUT LPAREN { weight_option { COMMA weight_option }* } RPAREN
weight_option ::= { simple_term | generation_term } { WEIGHT LPAREN decimal RPAREN }
and_op ::= { AND | AND2 }
and_not_op ::= { { AND NOT } | AMP_NOT }
or_op ::= { OR | OR2 }